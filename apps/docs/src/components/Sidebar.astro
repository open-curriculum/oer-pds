---
import {
  getCollection,
  type CollectionKey,
  type CollectionEntry,
} from 'astro:content';

import { COMPONENT_GROUPS_ORDER, NAVIGATION_KEYS } from '../shared/globals';

interface Props {
  class?: string;
  section?: CollectionKey;
}

const { class: className, section } = Astro.props;

type Entry = CollectionEntry<CollectionKey>;

type NavEntry = {
  slug?: string;
  title?: string;
  href?: string;
  group?: string;
  heading?: string;
};

let entries: Array<Entry> = [];
let navEntries: Array<NavEntry> = [];

if (section) {
  entries = await getCollection(section);

  if (section === NAVIGATION_KEYS.components) {
    entries = entries.filter((item: Entry) => !item.slug.includes('/'));
  }
}

navEntries = entries.map((item: Entry) => {
  return {
    slug: item.slug,
    title: item.data.title,
    href: `/${item.collection}/${item.slug}`,
    group: item.data.group,
  };
});

if (section === NAVIGATION_KEYS.components) {
  const _navEntries = navEntries;

  navEntries = [];

  COMPONENT_GROUPS_ORDER.forEach((heading) => {
    const entries = _navEntries.filter(
      (item: NavEntry) => item.group === heading,
    );

    if (entries.length) {
      navEntries = [...navEntries, { heading }, ...entries];
    }
  });
}

const pathName = Astro.url.pathname.endsWith('/')
  ? Astro.url.pathname.slice(0, -1)
  : Astro.url.pathname;

const fullSlug = pathName.split('/');
let currentSlug = fullSlug.reverse()[0];

if (currentSlug === 'usage' || currentSlug === 'accessibility') {
  currentSlug = fullSlug[1];
}
---

<aside class:list={['side', className]} data-handle="sidebar">
  {
    section && (
      <>
        <button class="close" data-handle="close" title="Close menu">
          <svg viewBox="0 0 24 24">
            <path
              fill="currentColor"
              d="m12 10.586l4.95-4.95l1.415 1.415l-4.95 4.95l4.95 4.95l-1.415 1.414l-4.95-4.95l-4.95 4.95l-1.413-1.415l4.95-4.95l-4.95-4.95L7.05 5.638l4.95 4.95Z"
            />
          </svg>
        </button>

        <div class="content">
          <strong class="heading">{section}</strong>
          <ul class="nav">
            {navEntries.length &&
              navEntries.map((entry: NavEntry) => {
                const { slug, href, title, heading } = entry;

                if (heading) {
                  return (
                    <li class="nav-heading">
                      <h3>{heading}</h3>
                    </li>
                  );
                }

                const isHidden = slug!.split('/').length > 1;

                if (isHidden) return;

                return (
                  <li class="nav-item">
                    <a
                      class:list={{ active: slug === currentSlug }}
                      href={href}
                      title={title}
                    >
                      {title}
                    </a>
                  </li>
                );
              })}
          </ul>
        </div>
      </>
    )
  }
</aside>

<style>
  .side {
    box-sizing: border-box;
    position: relative;
    padding: var(--awsm-space-6) var(--awsm-space-8);

    width: 22vw;
    min-width: 16rem;

    background: var(--awsm-color-background-muted);
    color: var(--awsm-color-content-muted);
  }

  @media screen and (max-width: 780px) {
    .side {
      position: fixed;
      left: auto;
      right: 100%;
      top: 0;
      padding-block-start: var(--awsm-space-8);
      z-index: 1000;
      width: 100vw;
      height: 100%;
      overflow: scroll;
    }

    .side.__state-opened {
      left: 0;
    }

    .side.__state-closed {
      left: auto;
      right: 100%;
    }
  }

  @media screen and (max-width: 480px) {
    .side {
      padding-inline: var(--awsm-space-4);
    }
  }

  @media screen and (min-width: 781px) {
    .content {
      position: sticky;
      top: var(--awsm-space-6);
    }
  }

  .heading {
    display: block;
    margin-block-end: var(--awsm-space-8);

    text-transform: uppercase;
    font-size: var(--awsm-font-size-l);
    color: var(--awsm-color-content-muted);
  }

  .close {
    display: block;
    position: absolute;
    top: var(--awsm-space-6);
    right: var(--awsm-space-8);

    padding: 0;
    background-color: transparent;
    border: none;
    color: inherit;
    font-size: var(--awsm-font-size-xl);
    line-height: 0;
    cursor: pointer;
  }

  @media screen and (min-width: 781px) {
    .close {
      display: none;
    }
  }

  @media screen and (max-width: 480px) {
    .close {
      right: var(--awsm-space-4);
    }
  }

  .close > svg {
    width: 1em;
    height: 1em;
  }

  .nav {
    padding: 0;
  }

  .nav li {
    margin: var(--awsm-space-4) 0;
    list-style: none;
  }

  li.nav-item {
    padding-inline-start: var(--awsm-space-4);
  }

  .nav li h3 {
    margin-block-start: var(--awsm-space-8);
    color: var(--awsm-color-content-muted);
  }

  .nav a {
    display: block;
    color: var(--awsm-color-content-regular);
    text-decoration: none;
  }

  @media (hover: hover) {
    .nav a:hover {
      color: var(--awsm-color-content-strong);
      text-decoration: underline;
    }
  }

  .nav a.active {
    padding-inline-start: var(--awsm-space-2);
    border-inline-start: var(--awsm-space-2) solid
      var(--awsm-color-accent-accent);
    color: var(--awsm-color-content-strong);
    cursor: default;
  }
</style>

<script>
  import { $sidebarState, setSidebarState } from '../store/store';
  import { SIDEBAR_STATE } from '../shared/globals';

  const sidebar = document.querySelector('[data-handle="sidebar"]');

  if (sidebar) {
    const clsPrefix = '__state-';

    $sidebarState.subscribe((state) => {
      const cls: string[] = [];

      for (let className of sidebar.classList.values()) {
        if (className.includes(clsPrefix)) continue;

        cls.push(className);
      }

      sidebar.className = '';
      sidebar.classList.add(...cls);
      sidebar.classList.add(`${clsPrefix}${state}`);
    });

    const close = document.querySelector('[data-handle="close"]');

    if (close) {
      close.addEventListener('click', () => {
        setSidebarState(SIDEBAR_STATE.closed);
      });

      close.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.code === 'Space' || e.code === 'Enter') {
          e.preventDefault();
          setSidebarState(SIDEBAR_STATE.closed);
        }
      });
    }
  }
</script>
